[
  
  {
    "title": "Types and Options of Git Merge",
    "url": "/posts/types-and-options-of-git-merge/",
    "categories": "Development, Git",
    "tags": "git, git merge, merge",
    "date": "2024-09-10 23:01:29 +0800",
    





    
    "snippet": "      When using Git to create multiple branches, you will eventually need to merge them. There are various methods available for merging branches.    Let’s begin by assuming familiarity with conce...",
    "content": "      When using Git to create multiple branches, you will eventually need to merge them. There are various methods available for merging branches.    Let’s begin by assuming familiarity with concepts such as commit, push, pull, and fetch, as well as the ability to create branches.    1. The Difference between Merge and Rebase  1.1 Merge  Merge combines two branches while preserving the flow from both branches.(specifically, 3 way-merge).  Pros      Merge History Preservation: This method clearly shows in the Git history that the tow branches have been merged.    Conflict Resolution: If conflicts occur, a merge commit is created, allowing the conflict resolution to be recorded.    Cons      Cluttered History: The history can become cluttered. If there are many branches or frequent merges, the commit log may become messy.    Example  git checkout main      git merge feature-branch        1.2 Rebase  Rebase moves the current branch’s commits onto the latest commit of the target branch.  Pros      Clear History:  It doesn’t leave extra Git commit histories, keeping the commit log linear and clean.    Cons      Creating New Commit: It generates new commits with new commit hashes, which can make tracking history more difficult.    Example  git checkout feature-branch      git rebase main      git checkout maingit merge feature-branch    It should be a fast-forward merge.      2. Types of Git Merge  If you don’t specify a particular merge method, Git will automatically choose the appropriate method.  2.1 Fast-forward merge  A fast-forward merge is used when the two branches being merged can simply be added to the end of the current branch.      No Merge Commit: The branch pointer is simply moved to new one.    Occurs in specific situations: This occurs when the branches have not progressed in parallel.    2.2 3-way merge  An 3-way merge is used when the the two branches have different commit.      Merge Commit: A merge commit is created. It compares the common ancestor commit of the two branches with the latest commit of each branch to generate a new merge commit.      3. Options of Git Merge  --ff  You can merge branches by a fast-forward with the --ff option.  Example  git checkout maingit merge feature-branch --ff        --no-ff  You can merge branches using a 3-way merge with the --no-ff option. This creates a merge commit, preserving the merge history.  Example  git checkout maingit merge feature-branch --ff        --squash  You can squash the commits from a branch into a single commit. This does not preserve the merge history.  Example    git checkout maingit merge feature-branch --squash    "
  },
  
  {
    "title": "Bagelcode Retrospective",
    "url": "/posts/bagelcode-retrospective/",
    "categories": "Retrospective",
    "tags": "bagelcode, backend, developer",
    "date": "2024-09-03 23:18:00 +0800",
    





    
    "snippet": "    1. Company Overview  Bagelcode is a rapidly growing mobile game company with a global market presence.  One of Bagelcode’s flagship games, Club Vegas Slots Casino Games, is enjoyed by over 50 m...",
    "content": "    1. Company Overview  Bagelcode is a rapidly growing mobile game company with a global market presence.  One of Bagelcode’s flagship games, Club Vegas Slots Casino Games, is enjoyed by over 50 million people worldwide. Notably, Club Vegas boasts the highest average playtime among social casino games and ranked in the top 100 for overall revenue on Android in the U.S. in 2022.  Club Vegas Slots Casino Games      Google Play    App Store    I worked as a backend developer for the Club Vegas Studio server teamRole : Backend Developer, Club Vegas Server TeamWork Period : February 26, 2024 - August 25, 2024  2. Key Tasks  As a member of the Club Vegas Studio server team, my tasks included:      Developing the game backend API server using TypeScript (Express.js)    Developing an in-house admin website using React    Developing a game item purchase and payment website using Next.js and NestJS    Building a backend server to support third-party payments by integrating with third-party payment providers’ webhooks    Operating the system with AWS and Kubernetes (EKS)    Implementing CI/CD pipelines using GitHub Actions    3. Key Projects  I independently undertook the development work for the following projects:  Implementing Challenge Missions  I implemented the logic for rewarding items to users who achieve certain milestones or frequencies on third-party payment sites to facilitate third-party payments. I also implemented a system to send analytic data to the Data Analysis team to measure the revenue impact of these challenge missions and improved an in-house admin website that can manage milestones or frequencies tailored to each player. My task is to improve the company’s revenue.  Website Login Page Renewal  I developed a payment website login page that allows users to log in by clicking a button, which automatically launches the game app and logs them in. This task improved the login experience, allowing users to log in more easily.  Refactoring Event Rewards Logic  I refactored the code related to event rewards and developed both the frontend and backend code for the in-house admin website. This enhancement enabled game administrators to dynamically and easily configure event reward values.  Building a Backend Server to Support Third-Party Payments and New Game Items  I developed the logic for selling and configuring new game items by integrating with third-party payment webhooks and APIs. This integration enabled game administrators, via the in-house admin website, to dynamically configure and manage new game items for sale.  DevOps  I participated in AWS workshops and the AWS Summit, where I learned about the latest trends in cloud computing. While managing Club Vegas Studio’s infrastructure, I also gained experience in using Terraform and Kubernetes(EKS)."
  },
  
  {
    "title": "백엔드 개발자 학습 자료 & 로드맵 (KOR)",
    "url": "/posts/backend-developer-learning-materials-roadmaps/",
    "categories": "Development",
    "tags": "backend developer, backend, developer",
    "date": "2024-08-02 23:03:05 +0800",
    





    
    "snippet": "      백엔드 개발을 혼자 공부하면서, 내가 올바른 방향으로 학습하고 있는지, 판단하기가 어려웠다. 이 글은 내가 백엔드 개발자로 성장하기 위해 사용한 학습 자료와 로드맵을 정리했다.    지금도 부족한 점이 많지만 지금까지 공부한 것들을 기록해 보려고 한다. 백엔드를 독학하는 사람들에게 도움이 되었으면 좋겠다.    (난이도, 실용성, 최신성) ...",
    "content": "      백엔드 개발을 혼자 공부하면서, 내가 올바른 방향으로 학습하고 있는지, 판단하기가 어려웠다. 이 글은 내가 백엔드 개발자로 성장하기 위해 사용한 학습 자료와 로드맵을 정리했다.    지금도 부족한 점이 많지만 지금까지 공부한 것들을 기록해 보려고 한다. 백엔드를 독학하는 사람들에게 도움이 되었으면 좋겠다.    (난이도, 실용성, 최신성) 이 세 가지 기준으로 주관적으로 평가하며, 계속 업데이트 중.  난이도: 학습에 있어 수준이 어려운가?실용성: 백엔드 개발자로서 현업에 되는 자료인가?최신성: 옛날 자료가 아니고, 최신 업데이트가 문서에 반영이 있는가?    1. 알고리즘/코딩테스트  알고리즘을 직접적으로 백엔드 개발에서 사용할 일은 없지만, 많은 회사들이 알고리즘에 관련된 코딩테스트를 본다.  이는 코딩테스트에서는 코드의 정확성, 빠른 실행 시간, 빠른 코드 작성 시간을 정량적으로 측정 가능하기 때문이다. 하지만 코딩테스트만으로는 코드를 간결하고, 가독성이 높게 짜는지, 돌발 상황에는 어떻게 대처하는 지는 평가가 불가능한 한계점이 있다. 이를 위해 라이브로 코딩테스트를 진행하기도 한다.  Upper Immediate            [site] solved.ac(난이도:★★★☆☆, 실용:★★★☆☆, 최신:★★★★☆)본인의 수준을 판단하기 좋으며, 낮은 수준부터 높은 수준까지 차례대로 풀면 필수적인 알고리즘과 자료 구조를 학습할 수 있다. 코딩테스트를 대비한다면 골드 레벨 문제를 원활히 풀 수 있도록 노력해야 한다.              [site] 프로그래머스(난이도:★★★☆☆, 실용:★★★☆☆, 최신:★★★★☆)공개된 카카오 코딩테스트 기출들 풀어보는 것 추천        Advanced            [book] 프로그래밍 대회에서 배우는 알고리즘 문제해결 전략 1,2(난이도:★★★★☆, 실용:★★☆☆☆, 최신:★★☆☆☆)프로그래밍 대회의 바이블, 이 책을 이해하는 수준이라면 코딩테스트는 걱정 안 해도 되는 레벨이다. 프로그래밍 대회를 대비하기 위해서는 필요하지만, 코딩 테스트를 대비하기에는 수준이 높은 내용이 많다.              [book] 프로그래밍 콘테스트 챌린징(난이도:★★★★☆, 실용:★☆☆☆☆, 최신:★★☆☆☆) ACM ICPC, IOI/KOI 대비용              [book] 알고리즘 트레이닝: 자료구조, 알고리즘 문제 해결 핵심 노하우(난이도:★★★★☆, 실용:★☆☆☆☆, 최신:★★☆☆☆)ACM ICPC, IOI/KOI 대비용            2. CS  Basic      [book] 혼자 공부하는 컴퓨터 구조 + 운영체제(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆)    [book] 혼자 공부하는 네트워크(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆)비전공자에게 추천하는 책. 학과 내용을 너무 깊지 않게 개발에 필요한 지식만 딱 한 권에 끝낼 수 있다.        3. JavaScript/TypeScript  Basic (Language)      [site] Javascript Tutorial(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆)          [site] 모던 JavaScript 튜토리얼(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆) 내용이 중복되기 때문에 위, 아래 사이트 둘 중 하나만 읽어도 충분하다.        [site] Typescript Tutorial(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆)    Basic (Framework)            [site] Express Starter(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★★★)한글 문서도 있으나 번역이 느려 영어 문서보다 업데이트가 느리므로 영어 문서로 직접 읽는 것이 좋다.              [blog] How to set up TypeScript with Node.js and Express(난이도:★☆☆☆☆, 실용:★★★★☆, 최신:★★★☆☆)              [site] NestJS Documentation(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★★★)공식 문서            4. MySql  Basic      [site] MySQL Tutorial(난이도:★★★☆☆,실용:★★★★☆, 최신:★★★★☆)        5. Redis  Basic      [우아한테크세미나] 191121 우아한레디스 by 강대명님(난이도:★★☆☆☆, 실용:★★★★☆, 최신:★★★☆☆, )        6. Git  Basic      [site] LearnGitBranching(난이도:★★☆☆☆, 실용:★★★☆☆, 최신:★★★★☆)무작정 실습하면서 Git을 공부하기 좋다.    Intermediate      [site] 생활코딩 - 지옥에서 온 Git(난이도:★★★☆☆, 실용:★★★☆☆, 최신:★★★★☆)여기 내용만 숙지해도 사용에 문제가 없다.        7. Docker/Kubernetes      8. AWS  Basic            [site] AWS Cloud Practitioner Essentials(난이도:★★☆☆☆, 실용:★★☆☆☆, 최신:★★★★★)AWS에서 제공하는 입문 강의. 애니메이션으로, 비유적으로 표현해 이해하기 쉬우며 한글 자막이 있다.              [site] AWS Technical Essentials(난이도:★★☆☆☆, 실용:★★☆☆☆, 최신:★★★★★)  한국어 강의. 위 강의와 내용이 대부분 겹친다.            9. CI/CD  Basic      [site] GitHub Actions Quick Start(난이도:★★★☆☆, 실용:★★★★☆, 최신:★★★★★)공식 문서        10. IaC (Infrastructure as Code)  Basic      [site] Terraform Tutorials(난이도:★★★☆☆, 실용:★★★☆☆, 최신:★★★★★)공식 문서        11. 리팩토링  Intermediate      [book] 클린 코드 Clean Code    [site] 클린코드 : 자바스크립트 (한국어 번역)    [book] 리팩토링 2판 (리팩토링 개정판)단순히 빠르고 정확한 코드를 넘어, 좋은 코드에 관한 책들. 좋은 코드가 무엇인지 사람마다 기준이 다르지만, 오랜 시간 경험이 쌓인 시니어 개발자들이 제시하는 기준들을 알 수 있다. 이것이 왜 좋은 코드인지, 그리고 코드를 왜 이렇게 짜야 하는지 근거가 생긴다.        12. 개발 문화      [blog] 효과적인 코드리뷰를 위한 리뷰어의 자세    [blog] 코드 리뷰를 어떻게 하는 게 좋을까?    [blog] 코드 리뷰 in 뱅크샐러드 개발 문화프로덕션은 혼자 만들지 못하고, 많은 사람들의 협업이 필요하다. 코드 리뷰어의 기본적인 태도에 관한 글.        13. 소프트 스킬  코드 몽키가 아닌 개발자로서의 발전에 도움을 주는 책      [book] 소프트 스킬(난이도:★☆☆☆☆, 실용:★★★★★, 최신:*)전문가가 되기 위한 조건 3가지(의사소통, 지식 전문성, 리더십)        좋은 자료가 있다면 추천 부탁드립니다."
  },
  
  {
    "title": "Built-in Bit Functions Provided by GCC",
    "url": "/posts/built-in-bit-functions-provided-by-gcc/",
    "categories": "Development, C/C++",
    "tags": "built-in, c, c++, bits, lcp, ps, problem solving, __builtin_clz(x), __builtin_ctz(x), __builtin_popcount, __builtin_parity, __builtin_clzll, __builtin_ctzll, __builtin_popcountll, __builtin_parityll",
    "date": "2024-07-25 23:03:13 +0800",
    





    
    "snippet": "      GCC includes built-in bit functions. These functions can perform tasks such as counting the number of 1-bits in a number, and their time complexity is O(1).        6.63 Other Built-in Functio...",
    "content": "      GCC includes built-in bit functions. These functions can perform tasks such as counting the number of 1-bits in a number, and their time complexity is O(1).        6.63 Other Built-in Functions Provided by GCC    1. Overview  In theory, counting the number of 1-bits in a number 𝑁 has a time complexity of 𝑂(log𝑁) since it involves repeatedly dividing the number by two until it becomes zero. However, using built-in functions, this task can be accomplished in 𝑂(1) time complexity.  2. Instructions  Code  For long long type literals, you need to append “ll” to the functions.  #include &lt;iostream&gt;int main(){  // 29 = 00000000 00000000 00000000 00011101 in binary  unsigned int x = 29;   // Count leading zeros =&gt; 27  std::cout &lt;&lt; \"__builtin_clz(x) = \" &lt;&lt; __builtin_clz(x) &lt;&lt; endl; // Count trailing zeros =&gt; 0  std::cout &lt;&lt; \"__builtin_ctz(x) = \" &lt;&lt; __builtin_ctz(x) &lt;&lt; endl; // Count number of 1 bits =&gt; 4  std::cout &lt;&lt; \"__builtin_popcount(x) = \" &lt;&lt; __builtin_popcount(x) &lt;&lt; endl; // Parity (1 if the number of 1 bits is odd, 0 if even) =&gt; 0  std::cout &lt;&lt; \"__builtin_parity(x) = \" &lt;&lt; __builtin_parity(x) &lt;&lt; endl;  // 12345678987654321 = 00000000 00100011 01001011 11100010 01010001 10001010 10001110 11110101  unsigned long long y = 12345678987654321ULL;// Count leading zeros for long long =&gt; 10  std::cout &lt;&lt; \"__builtin_clzll(y) = \" &lt;&lt; __builtin_clzll(y) &lt;&lt; endl;  // Count trailing zeros for long long =&gt; 0  std::cout &lt;&lt; \"__builtin_ctzll(y) = \" &lt;&lt; __builtin_ctzll(y) &lt;&lt; endl; // Count number of 1 bits for long long =&gt; 27  std::cout &lt;&lt; \"__builtin_popcountll(y) = \" &lt;&lt; __builtin_popcountll(y) &lt;&lt; endl; // Parity for long long =&gt; 1  std::cout &lt;&lt; \"__builtin_parityll(y) = \" &lt;&lt; __builtin_parityll(y) &lt;&lt; endl;  return 0;}    Output  __builtin_clz(x) = 27__builtin_ctz(x) = 0__builtin_popcount(x) = 4__builtin_parity(x) = 0__builtin_clzll(y) = 10__builtin_ctzll(y) = 0__builtin_popcountll(y) = 27__builtin_parityll(y) = 1    3. Custom functions vs Built-in function  Comparison of execution time between the custom function and the built-in function.  Code  #include &lt;time.h&gt;#include &lt;stdio.h&gt;const int LIMIT = 100000000;// Function to count the number of 1 bits using a loopint getPopCountLoop(int num) {    int count = 0;    while (num) {        if (num &amp; 1) count++;        num &gt;&gt;= 1;    }    return count;}// Function to count the number of 1 bits without using a loopint getPopCountNotLoop(int num) {    return (num &gt;&gt; 30 &amp; 1)         + (num &gt;&gt; 29 &amp; 1)         + (num &gt;&gt; 28 &amp; 1)         + (num &gt;&gt; 27 &amp; 1)         + (num &gt;&gt; 26 &amp; 1)         + (num &gt;&gt; 25 &amp; 1)         + (num &gt;&gt; 24 &amp; 1)         + (num &gt;&gt; 23 &amp; 1)         + (num &gt;&gt; 22 &amp; 1)         + (num &gt;&gt; 21 &amp; 1)         + (num &gt;&gt; 20 &amp; 1)         + (num &gt;&gt; 19 &amp; 1)         + (num &gt;&gt; 18 &amp; 1)         + (num &gt;&gt; 17 &amp; 1)         + (num &gt;&gt; 16 &amp; 1)         + (num &gt;&gt; 15 &amp; 1)         + (num &gt;&gt; 14 &amp; 1)         + (num &gt;&gt; 13 &amp; 1)         + (num &gt;&gt; 12 &amp; 1)         + (num &gt;&gt; 11 &amp; 1)         + (num &gt;&gt; 10 &amp; 1)         + (num &gt;&gt; 9 &amp; 1)         + (num &gt;&gt; 8 &amp; 1)         + (num &gt;&gt; 7 &amp; 1)         + (num &gt;&gt; 6 &amp; 1)         + (num &gt;&gt; 5 &amp; 1)         + (num &gt;&gt; 4 &amp; 1)         + (num &gt;&gt; 3 &amp; 1)         + (num &gt;&gt; 2 &amp; 1)         + (num &gt;&gt; 1 &amp; 1)         + (num &gt;&gt; 0 &amp; 1);}int main() {    int count1 = 0, count2 = 0, count3 = 0;    clock_t start, finish;    double duration;    // Measure time using loop-based function    start = clock();    for (int i = 1; i &lt;= LIMIT; i++) {        count1 += getPopCountLoop(i);    }    finish = clock();    duration = (double)(finish - start) / CLOCKS_PER_SEC;    printf(\"%lf s &lt;- Using Loop\\n\", duration);    // Measure time using non-loop function    start = clock();    for (int i = 1; i &lt;= LIMIT; i++) {        count2 += getPopCountNotLoop(i);    }    finish = clock();    duration = (double)(finish - start) / CLOCKS_PER_SEC;    printf(\"%lf s &lt;- Not Using Loop\\n\", duration);    // Measure time using built-in function    start = clock();    for (int i = 1; i &lt;= LIMIT; i++) {        count3 += __builtin_popcount(i);    }    finish = clock();    duration = (double)(finish - start) / CLOCKS_PER_SEC;    printf(\"%lf s &lt;- Built-in function\\n\", duration);    // Print results    printf(\"\\n%d %d %d\\n\", count1, count2, count3);    return 0;}    Output  Time: Using Loop &gt; Not Using Loop &gt; Built-in function  7.639704 s &lt;- Using Loop0.647321 s &lt;- Not Using Loop0.067076 s &lt;- Built-in function1314447116 1314447116 1314447116    4. How these functions can perform in O(1) time complexity?  1. Hardware Support  Modern CPUs provide special instructions for bit manipulation operations, which are executed in constant time.  Examples include:      CLZ (Count Leading Zeros): Instructions like LZCNT on x86 or CLZ on ARM.    CTZ (Count Trailing Zeros): Instructions like TZCNT on x86 or RBIT combined with CLZ on ARM.    POPCOUNT (Population Count): Instructions like POPCNT on x86 or VCNT on ARM.    PARITY: Instructions like POPCNT can be used to determine parity by checking the number of 1s.    2. Compiler Optimization  The GCC and Clang compilers are optimized to translate these built-in functions directly into the corresponding hardware instructions. This means that when you use a built-in function like \\(\\text{__builtin_clz}\\), the compiler generates code that directly utilizes the efficient hardware instructions.  3. Constant Time Execution  Since these hardware instructions are executed in a fixed number of cycles, the operations they perform (counting leading zeros, counting trailing zeros, counting the number of 1 bits, or determining parity) are completed in constant time, \\(O(1)\\). The complexity does not depend on the size of the input; instead, it is bounded by the nature of the instruction set of the CPU.  5. Applications  You could find the highest power of two that is smaller than or equal to 𝑛 in 𝑂(1) time complexity.  int highestPowerOf2(int n) {    if (n &lt;= 0) return 0; // There is an assumption that n is positive, but additional safeguards    return 1 &lt;&lt; (31 - __builtin_clz(n));}long long highestPowerOf2(long long n) {    if (n &lt;= 0) return 0; // There is an assumption that n is positive, but additional safeguards    return 1LL &lt;&lt; (63 - __builtin_clzll(n));}  "
  },
  
  {
    "title": "Suffix Array and LCP Array",
    "url": "/posts/algorithm-suffix-array/",
    "categories": "Problem Solving, Algorithm",
    "tags": "string, suffix array, lcp array, suffix, lcp, ps, problem solving, Manber-Myers",
    "date": "2024-07-24 23:01:29 +0800",
    





    
    "snippet": "      Suffix Array and LCP Array are known as the Swiss Army knife in string-related problem solving.    1. Description  Suffix Array  A suffix array for a string \\(s\\) is an array of integers repr...",
    "content": "      Suffix Array and LCP Array are known as the Swiss Army knife in string-related problem solving.    1. Description  Suffix Array  A suffix array for a string \\(s\\) is an array of integers representing the starting positions of all suffixes of \\(s\\) in lexicographical order. More formally, if \\(s\\) is a string of length \\(n\\), \\(\\text{suffixArray}[i]\\) indicates the starting index of the i-th smallest suffix of \\(s\\) when sorted lexicographically.  For example, if \\(s\\) = “\\(banana\\)”, the suffix array would be an array containing the starting positions of the suffixes “\\(a\\)”, “\\(ana\\)”, “\\(anana\\)”, “\\(banana\\)”, “\\(na\\)”, and “\\(nana\\)”, sorted in lexicographical order.  In this case, its suffix array is \\([5, 3, 1, 0, 4, 2]\\).  LCP Array  The Longest Common Prefix (LCP) array for a string s is an array that stores the lengths of the longest common prefixes between consecutive suffixes in the suffix array. Specifically, if suffixArray is the suffix array of s, then the LCP array LCP is defined such that \\(\\text{LCP}[i]\\) is the length of the longest common prefix between the suffixes starting at \\(\\text{suffixArray}[i]\\) and \\(\\text{suffixArray}[i-1]\\).  For instance, if \\(s\\) = “\\(banana\\)”, the suffix array will represent the suffixes “\\(a\\)”, “\\(ana\\)”, “\\(anana\\)”, “\\(banana\\)”, “\\(na\\)”, and “\\(nana\\)”, then the LCP array will provide the lengths of the common prefixes between adjacent suffixes in this order.  In this case, its LCP array is \\([null, 1, 3, 0, 0, 2]\\)  2. Code  A Suffix Array can be obtained using the Manber-Myers algorithm. If we use quicksort, the time complexity is \\(O(Nlog^2N)\\). If we use counting sort, the time complexity is \\(O(NlogN)\\).  We can also obtain a LCP Array from a Suffix Array using Kasai’s algorithm. It’s time complexity is \\(O(N)\\)  #include &lt;bits/stdc++.h&gt;using namespace std;const int MAX_VALUE_TO_HANDLE_ASCII = 300;struct Comparator {  const vector&lt;int&gt; &amp;group;  int t;  Comparator(const vector&lt;int&gt; &amp;_group, int _t): group(_group),t(_t) {};  bool operator () (int indexA, int indexB){ // Allows this object to be used as a function    if(group[indexA]!=group[indexB]) return group[indexA] &lt; group[indexB];    return group[indexA+t]&lt;group[indexB+t];    // Since group[indexA] == group[indexB], there is at least an overlap of t characters from the start.    // Thus, the lengths of s[indexA..] and s[indexB..] are at least t.    // In other words, indexA + t &lt;= n and indexB + t &lt;= n.    // To handle the case where the index is n, set group[n] = -1.  }};void countingSort(vector&lt;int&gt; &amp;suffixArray, vector&lt;int&gt; &amp;group, int t){  int n=suffixArray.size();  int maxVal=max(MAX_VALUE_TO_HANDLE_ASCII,n+1);  // group can range from 0 to n. Consider the array bounds carefully.  vector&lt;int&gt; c(maxVal);  vector&lt;int&gt; idx(n);  for(int i=0;i&lt;n;i++)  idx[i]=suffixArray[i]+t&lt;n ? group[suffixArray[i]+t] : 0;  for(int i=0;i&lt;n;i++) c[idx[i]]++;  for(int i=1;i&lt;maxVal;i++) c[i]+=c[i-1];  vector&lt;int&gt; temp(n);  for(int i=n-1;i&gt;=0;i--){    temp[--c[idx[i]]]=suffixArray[i];  }  swap(suffixArray, temp);}vector&lt;int&gt; getSuffixArray(const string &amp;s){  int n = s.size(), t=1;  vector&lt;int&gt; group(n+1);  // group[i] = the group number that s[i...] belongs to when sorted by the first t characters.  vector&lt;int&gt; suffixArray(n);  // suffixArray[0] = i means s[i..] is the lexicographically smallest.  for(int i=0;i&lt;n;i++) group[i]=s[i], suffixArray[i]=i;  group[n]=0;  while(t&lt;n){    Comparator compareUsing2T(group,t);    // Choose between O(NlogN) quick sort and O(N) counting sort.   // sort(suffixArray.begin(),suffixArray.end(),compareUsing2T);    countingSort(suffixArray,group,t); countingSort(suffixArray,group,0);    t*=2;    if(t&gt;=n) break;    vector&lt;int&gt; newGroup(n+1);    newGroup[n]=0;    newGroup[suffixArray[0]]=1;    for(int i=1;i&lt;n;i++)      if(compareUsing2T(suffixArray[i-1],suffixArray[i]))        newGroup[suffixArray[i]]=newGroup[suffixArray[i-1]]+1;      else        newGroup[suffixArray[i]]=newGroup[suffixArray[i-1]];    swap(group, newGroup);  }  return suffixArray;}vector&lt;int&gt; getLcpArray(string s, vector&lt;int&gt; &amp;suffixArray){  int n=s.size();  vector&lt;int&gt; iSA(n), LCP(n);  for(int i=0;i&lt;n;i++) iSA[suffixArray[i]]=i;  for(int i=0,L=0;i&lt;n;i++){    if(iSA[i]==0) continue;    while(i+L&lt;n &amp;&amp; suffixArray[iSA[i]-1]+L&lt;n      &amp;&amp; s[i+L]==s[suffixArray[iSA[i]-1]+L]) L++;    LCP[iSA[i]]=L;    L=max(L-1,0);  }  return LCP;}int main(){  string s;  cin&gt;&gt;s;  auto suffixArray=getSuffixArray(s);  for(auto index:suffixArray) cout&lt;&lt;index&lt;&lt;\" \";  cout&lt;&lt;endl;  auto lcpArray=getLcpArray(s, suffixArray);  for(int i=0;i&lt;lcpArray.size();i++)    if(i==0) cout&lt;&lt;\"x \";    else cout&lt;&lt;lcpArray[i]&lt;&lt;\" \";}    3. Example  String: “banana”                    i        Suffix        Suffix Array        iSA        LCP Array                            0        a        5        3        null                    1        ana        3        2        1                    2        anana        1        5        3                    3        banana        0        1        0                    4        na        4        4        0                    5        nana        2        0        2              Ordered by iSA                    iSA        Suffix        LCP Array                            0        banana        0                    1        anana        3                    2        nana        2                    3        ana        1                    4        na        0                    5        a        null                  You can test your code here  "
  },
  
  {
    "title": "Maximum Bipartite Matching",
    "url": "/posts/algorithm-maximum-bipartite-matching/",
    "categories": "Problem Solving, Algorithm",
    "tags": "bipartite graph, maximum bipartite matching, ps, problem solving, algorithm",
    "date": "2024-07-13 23:22:00 +0800",
    





    
    "snippet": "  A matching in a bipartite graph is a set of edges selected so that no two edges share a common vertex. A maximum matching is a matching that contains the greatest number of edges possible.  1. Bi...",
    "content": "  A matching in a bipartite graph is a set of edges selected so that no two edges share a common vertex. A maximum matching is a matching that contains the greatest number of edges possible.  1. Bipartite Graph  If you can paint all vertices of a graph in two colors such that adjacent vertices have different colors, the graph is called a bipartite graph.  2. Maximum Bipartite Matching  Maximum Bipartite Matching is an algorithm used to find the maximum matching in a bipartite graph.  So, what is maximum matching?  A matching in a graph is a set of edges such that no two edges share a common vertex. In other words, it is a way of pairing up vertices such that each vertex is connected to exactly one other vertex via the edges in the matching.  In a bipartite graph, the goal of the maximum bipartite matching algorithm is to find the largest possible matching, where the number of paired vertices is maximized. This means identifying the maximum number of edges that can be included in the matching without any two edges overlapping on a same vertex.  The algorithm is particularly useful in various practical applications, such as job assignments, where tasks need to be assigned to workers in a way that maximizes efficiency while ensuring no worker is assigned more than one task.    For example, the maximum bipartite matching is 4 in the above picture. Of course, another way of matching the edges can exist. You can match vertex 3 and vertex 4 instead of matching vertex 2 and vertex 4.  3. Algorithm Explanation  To be written…  4. Code      If there exists an edge connecting vertex 1 in group A and vertex 2 in group B and an edge connecting vertex 1 in group A and vertex 3 in group B, we indicate this as 𝑉[1]={2,3}    N represents the number of vertices in group A, and M represents the number of vertices in group B.    The assign array indicates where a vertex in group B connects to in group A.    The visit array tracks visiting history to prevent infinite loops.    The time complexity is 𝑂(𝑁𝐸)(where 𝑁 is the number of vertices and 𝐸 is the number of edges).    bool dfs(int v,vector&lt;vector&lt;int&gt;&gt; &amp;V, vector&lt;bool&gt; &amp;visit, vector&lt;int&gt; &amp;assign){    for(auto to:V[v]){        if(visit[to]) continue;        visit[to]=true;        if(assign[to]==0 || dfs(assign[to],V,visit,assign)){             assign[to]=v;            return true;        }    }    return false;}int maximumBipartiteMatching(int N,int M,vector&lt;vector&lt;int&gt;&gt; &amp; V){    vector&lt;bool&gt; visit(M+1);    vector&lt;int&gt; assign(M+1);    int ans=0;    for(int i=1; i&lt;=N;i++){        for(int j=1;j&lt;=M;j++) visit[j]=0;         if(dfs(i,V,visit,assign)) ans++;    }        return ans;}  "
  },
  
  {
    "title": "SCPC 2024 Round 1 (1차 예선) 풀이 ( KOR )",
    "url": "/posts/scpc2024-round1/",
    "categories": "Problem Solving, SCPC",
    "tags": "scpc, scpc 2024, scpc 2024 round1, scpc 2024 1차 예선, ps, problem solving, A보다 B가 좋아, 배달, 보안망 점검, 딱 맞게, 스퀘어",
    "date": "2024-07-06 23:01:29 +0800",
    





    
    "snippet": "  SCPC ( Samsung Collegiate Programming Cup ) 2024 Round 1 모든 문제 풀이  1. A보다 B가 좋아  1.1 아이디에이션      입력 크기를 보니 시간 복잡도가 O(N)이고 이중 반복문은 불가능하다.    구간을 최대한 작게 쪼개서 생각해볼 수 있나?    1.2 해결법  전체 문자열에서 ‘A’가 0개 ...",
    "content": "  SCPC ( Samsung Collegiate Programming Cup ) 2024 Round 1 모든 문제 풀이  1. A보다 B가 좋아  1.1 아이디에이션      입력 크기를 보니 시간 복잡도가 O(N)이고 이중 반복문은 불가능하다.    구간을 최대한 작게 쪼개서 생각해볼 수 있나?    1.2 해결법  전체 문자열에서 ‘A’가 0개 일 때, 1개 일 때, 2개 일 때, 3개 일 때 천천히 예제를 만들어 보면서 규칙을 알 수 있다.  고려해볼 구간을 작게 작게 최대한 쪼개보자. 고려해볼 최대 작은 구간은 A(B..)A 같은 2개의 A에 B만 껴있는 구간이다.  두 개의 ‘A’ 사이에는 무조건 2개 이상의 ‘B’가 있으면 문제 조건을 만족한다.  문자열을 돌면서 2개의 ‘A’ 사이에 B가 몇 개인지 세고, 2개 미만이면 ‘B’가 2개가 되도록 한다.  ABBABBA 라는 문자열이 있다고 가정할 때, 첫 번째의 A와 네 번째의 A, 네 번째의  A와 일곱 번째의 A를 비교하면 된다.  굳이 첫 번째의 A와 일곱 번째의A는 비교하지 않고 양 옆으로 가장 가까운 A끼리만 비교하면 된다.   1.3 코드 보기      #include &lt;bits/stdc++.h&gt;using namespace std;void solve(){  int n;  string a;  scanf(\"%d\",&amp;n);  cin&gt;&gt;a;  int last=-1;  int ans=0;  for(int i=0;i&lt;a.size();i++){    if(a[i]=='A'){      if(last==-1) last=i;      else{        ans+=max(2-(i-last-1),0);        last=i;      }    }  }  printf(\"%d\\n\",ans);}int main(){  int t;  scanf(\"%d\",&amp;t);  for(int i=1;i&lt;=t;i++){    printf(\"Case #%d\\n\",i);    solve();  }}              2. 배달  2.1 아이디에이션      시간 복잡도가 O(N) 아니면 힘들 것 같다.    |d - c| + |c - b| + |b - a| + |d - a|수식을 좀 더 간단히 정리 가능한가?    2.2 해결법  a, b, c ,d 가 오름차순이라고 가정하면 2*(d-a)로 깔끔하게 정리됨을 알 수 있다.  핵심은 그러면 a랑 d를 뭘로 선택하는 지가 핵심이다.  2*(d-a) 값들의 합이 최대가 되려면 a는 젤 작은 (n/4)개 중 하나이고, d는 젤 큰 (n/4)개 중 하나이다.   2.3 코드 보기      #include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;void solve(){  ll i,ans=0,n;  scanf(\"%lld\",&amp;n);  vector&lt;ll&gt; a(n);  for(i=0;i&lt;n;i++){    scanf(\"%lld\",&amp;a[i]);  }  sort(a.begin(),a.end());  for(i=0;i&lt;n/4;i++){    ans-=a[i];  }  for(i=n/4*3;i&lt;n;i++){    ans+=a[i];  }  printf(\"%lld\\n\",ans*2);}int main(){  ll T;  scanf(\"%lld\",&amp;T);  for(ll i=1;i&lt;=T;i++){    printf(\"Case #%lld\\n\",i);    solve();  }}              3. 보안망 점검  3.1 아이디에이션      그래프가 원형이라는 것은 굉장히 특별한 조건이다.    원형을 이루지 않는 선, 원형을 이루는 선 각 각 하나씩 지워도 항상 모두 연결되어 있다.    그럼 원형을 이루는 선 2개를 지우는 것이 필요 조건인가?    3.2 해결법  degree가 3인 정점은 2개 이고, 해당 두 정점이 원형이 아닌 간선 양 끝점이다.원형을 이루지 않은 선을 쭉 연장해서 직선으로 그어보자. 그러면 2개의 영역이 나뉘고 각 영역에서 아무렇게 2개의 간선을 뽑으면 항상 고립되는 구간이 생긴다.   3.3 코드 보기      #include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll ans,sv;void dfs(ll v,vector&lt;bool&gt; &amp;visited,vector&lt;vector&lt;ll&gt;&gt; &amp;V,vector&lt;ll&gt; &amp;st){  visited[v]=true;  ++ans;  if(st[1]==v) sv=ans;  for(auto to:V[v]){    if(v==st[0] &amp;&amp; to==st[1]) continue;    if(v==st[1] &amp;&amp; to==st[0]) continue;    if(!visited[to]) dfs(to,visited,V,st);  }}void solve(){  ll n;  scanf(\"%lld\",&amp;n);  vector&lt;ll&gt; ind(n+10);  vector&lt;vector&lt;ll&gt;&gt; V(n+10);  vector&lt;ll&gt; st;  vector&lt;bool&gt; visited(n+10);  for(ll i=1;i&lt;=n+1;i++){    ll x,y;    scanf(\"%lld %lld\",&amp;x,&amp;y);    ind[x]++;    ind[y]++;    V[x].push_back(y);    V[y].push_back(x);  }  for(ll i=1;i&lt;=n;i++){    if(ind[i]==3) st.push_back(i);  }  ans=0;  dfs(st[0],visited,V,st);  ll a=sv-1,b=n-a;  printf(\"%lld\\n\",a*(a-1)/2+b*(b-1)/2);}int main(){  ll T;  scanf(\"%lld\",&amp;T);  for(ll i=1;i&lt;=T;i++){    printf(\"Case #%lld\\n\",i);    solve();  }}              4. 딱 맞게      투 포인터, priority queue    4.1 아이디에이션            \\(O(NlogN)\\) 의 시간복잡도로 풀어야하는 것이 입력 크기 조건에서 보인다.              어떻게 매칭되는 지 \\( F(A,B)\\) 가 정해져 있다고 하고, 매칭 형식을 이렇게 \\((a_i,b_j )\\) 표현해보자. \\(maxF(A,B) = |a_i-b_j|\\)\\(\\quad (1 \\leq i \\leq n \\, \\text{and} \\, 1 \\leq j \\leq n)\\) 가 되는 \\((i,j)\\) 쌍은 하나여도 충분하다. 나머지 \\((i,j)\\) 쌍들은 차가 \\(maxF(A,B)\\)이하만 만족한다면 어떻게 매칭되어도 문제가 없다.              이왕이면 나머지 \\((i,j)\\) 쌍들에 대해 \\(maxF(A,B)\\)가 최소가 되도록하는 재조합이 있는가?        4.2 해결법  4.2.1 보조 정리1   \\(a &lt; b\\) 이고, \\(c &lt; d\\) 일 때, \\(max(|a - c|, |b - d|) \\leq max(|a - d|, |b - c|) \\) 을 만족한다.  4.2.2 보조 정리2  길이가 n이고, 각 각 오름차순으로 정렬되있는 배열 A,B에 대해 \\(maxF(A,B)\\) 가 최소가 될려면, \\(F(A,B)\\) 함수는 모든 i에 대해 \\(F(a_i)=b_i\\) 다. ( \\(1 \\leq i \\leq n\\) )  4.2.3 풀이  \\(A\\), \\(B\\) 배열을 오름차순으로 정렬하고, 투 포인터로 문제를 진행하자. 투 포인터 \\(s\\), \\(e\\)의 정의는 아래 그림을 보면 이해가 갈 것이다.  \\(maxF\\)의 값은 특정 하나의 쌍 \\(a_i\\) 와 \\(b_j\\)에 의해 결정되어도 충분함을 알 수 있다. 그리고 나머지 \\(a\\), \\(b\\)들의 차를 최소로 하려면 보조정리 2에 의해 작은 순서대로 서로 하나씩 매칭해줘야 한다. 그림 상에서는 주황 간선에 의해 \\(maxF\\)가 결정된다.  또한, ( 투 포인터가 \\([s_1,e_1]\\)일 때 \\(maxF\\) )  \\(\\geq\\)  (투 포인터가 \\([s_2,e_2]\\)일 때 \\(maxF\\)) \\((s_1 \\leq s_2 \\text{ and } e_2 \\leq e_1)\\) 가 성립함을 알 수 있다. 이해가 안 된다면, 한 단계가 진행될 때 실제로 매칭이 변경된 간선들만 따로 빼서 정리한 아래 그림을 봐보자.  변화 과정에서 4개 요소들의 매칭 관계가 변경되고 이 4개 요소들에 대해 보조 정리1 적용해보면 이해가 될 것이다.  따라서, 해당 투 포인터에 대해 \\(maxF\\)가 \\(L\\)이하면 \\(e\\)가 1 증가, 초과면 \\(s\\)가 1증가. 그럼 투 포인터가 진행될 때, 해당 구간의 \\(maxF\\) 값을 구하고, 갱신하는 것이 핵심으로 보인다. 이 부분은 prioirity queue를 이용해 해결했다. 투 포인터를 진행하면서 \\(a_i\\)와 \\(b_{i+1}\\)의 차를 priority queue에 집어넣고, 차의 최댓값을 알고 싶을 때, priority queue의 top으로 최댓값을 알수 있다. 만약 top이 \\(s\\), \\(e\\) 구간 밖에 해당하는 값이라면 아닐 때까지 prioirity queue의 top을 pop 한다. \\(maxF\\)를 결정하는 \\(a_i\\)와 \\(b_j\\)에 대하여 (\\(i \\geq j\\))일 때 차만 비교 할 것이 아니라 (\\(i \\leq j\\))일 때 차도 고려해야 하는데, 이건 \\(A\\),\\(B\\) 배열을 바꿔서 똑같은 과정을 한 번 더하면 쉽게 해결된다. 총 시간 복잡도는 \\(O(NlogN)\\)   4.3 코드 보기      #include &lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;priority_queue&lt;pair&lt;ll,ll&gt;&gt; Q;ll oo=9999999999L;ll ans=-1;void twoPointer(ll n,vector&lt;ll&gt; &amp;A, vector&lt;ll&gt; &amp;B, vector&lt;ll&gt; &amp;maxStFromLef, vector&lt;ll&gt; &amp;maxStFromRig, ll L, vector&lt;ll&gt; &amp;rigM){  ll left=0,right =-1;  while(!Q.empty()) Q.pop();  while(true){    ll mx=-oo;    mx=max(mx,A[right+1]-B[left]);    mx=max(mx,left-1&lt;0 ? 0:maxStFromLef[left-1]);    mx=max(mx,right+2&gt;=n ? 0:maxStFromRig[right+2]);    while(!Q.empty()){      auto t=Q.top();      if (t.second&lt;left) Q.pop();      else break;    }    if(!Q.empty()){      auto t=Q.top();      mx=max(mx,t.first);    }    if(mx&gt;L){      left++;      if(left&gt;right+1) break;    } else{      if(mx&lt;=L &amp;&amp; mx&gt;ans) ans=mx;      right++;      if(right==n-1) break;      Q.push({rigM[right],right});    }  }}void preProcessing(vector&lt;ll&gt; &amp;A, vector&lt;ll&gt; &amp;B, ll n,ll m){  vector&lt;ll&gt; stM(n); // |a_i-b_i|  vector&lt;ll&gt; lefM(n); // |a_i-b_(i-1)|  vector&lt;ll&gt; rigM(n); // |a_i-b_(i+1)|  vector&lt;ll&gt; maxStFromLef(n);  vector&lt;ll&gt; maxStFromRig(n);  for(ll i=0;i&lt;n;i++){    stM[i]=abs(A[i]-B[i]);    if(i&gt;=1) lefM[i]=abs(A[i]-B[i-1]);    if(i&lt;n-1) rigM[i]=abs(A[i]-B[i+1]);  }  maxStFromLef[0]=stM[0];  for(ll i=1;i&lt;n;i++) maxStFromLef[i]=max(maxStFromLef[i-1],stM[i]);  maxStFromRig[n-1]=stM[n-1];  for(ll i=n-2;i&gt;=0;i--) maxStFromRig[i]=max(maxStFromRig[i+1],stM[i]);  twoPointer(n,A,B,maxStFromLef,maxStFromRig,m,rigM);}void solution(){  ll n,m;  scanf(\"%lld %lld\",&amp;n,&amp;m);  vector&lt;ll&gt; A(n);  vector&lt;ll&gt; B(n);  for(ll i=0;i&lt;n;i++) scanf(\"%lld \",&amp;A[i]);  for(ll i=0;i&lt;n;i++) scanf(\"%lld\",&amp;B[i]);  sort(A.begin(),A.end());  sort(B.begin(),B.end());  ans=-1;  preProcessing(A,B,n,m);  preProcessing(B,A,n,m);  printf(\"%lld\\n\",ans);}int main(){  ll T;  scanf(\"%lld\",&amp;T);  for(ll i=1;i&lt;=T;i++){    printf(\"Case #%lld\\n\",i);    solution();  }}              5. 스퀘어      투 포인터, Mo’s algorithm    5.1 아이디에이션      배열 길이가 최대 50000이므로 아무리 50001 이상의 숫자는 아무리 모아도 자기 자신을 square 할 수가 없다. 배열에서 50001이상의 숫자는 몇 개 있는지 무시하자.    알면 풀고, 모르면 못푸는 전형적인 문제. Mo’s algorithm을 알아야 풀 수 있다.           아슬아슬하게 시간 복잡도 \\((Q+N)\\sqrt{N}\\)로 가능할 것 같다         5.2 해결법  Mo’s algorithm을 공부 먼저 하자. 해당 알고리즘을 알고 있다는 가정하에, 투 포인터를 가지고 진행해야 하는 것이 감이 올 것이다.  s는 현재 구간의 시작 지점 인덱스, e는 현재 구간의 끝 지점 인덱스. 현재 구간에서 스퀘어가 가능한 갯수는 currentSqCnt 변수를 조회해 알 수 있다 하고, a[i]의 값의 갯수는 count[ a[i] ]를 조회해 알 수 있다고 하자.  s과 e가 하나씩 움직일 때마다 count 배열과 currentSqCnt를 갱신한다면, s, e가 바뀌어도 올바른 count 배열과 currentSqCnt를 알 수 있다. count 배열과 currentSqCnt를 갱신하는 것은 상수 시간만에 가능하다.  갱신이 상수 시간만에 가능하다는 것을 2로 예시를 들어보자. 2가 스퀘어 된다고 가정해보자.  2 * 2 = 4  4 * 4 = 16  16 * 16 = 256  256 * 256 = 65536  65536은 50000보다 크므로 무시  2가 스퀘어 될 때 영향을 미치는 숫자들은 2, 4, 16, 256이고 이 숫자들에 관련된 count 배열만 업데이트한다. 4 정도면 상수 시간이라고 봐도 무리 없다.  bucket에 의해 정렬된 첫 번째 쿼리에 대해서만 count 배열과 currentSqCnt를 구하고, 이후 투 포인터가 진행될 때마다 count와 currentSqCnt에 대한 업데이트를 진행한다면 \\((Q+N)\\sqrt{N}\\) 시간 복잡도로 풀이가 가능하다.   5.3 코드 보기      #include &lt;bits/stdc++.h&gt;#define Limit 50000typedef long long ll;using namespace std;ll k; // bucket sizestruct Query{  ll s,e,index,ans;};bool compareByBucket(Query&amp; lef,Query&amp; rig){  return (lef.s-1)/k&lt;(rig.s-1)/k || ( (lef.s-1)/k==(rig.s-1)/k&amp;&amp; lef.e&lt;rig.e );}bool compareByIndex(Query&amp; lef,Query&amp; rig){  return lef.index&lt;rig.index;}void updateWhenErase(ll num, ll &amp;currentSqCnt,vector&lt;ll&gt; &amp;count){  if(num==1) return;  ll cur=num;  vector&lt;ll&gt; history;  while(1){    if(cur&gt;Limit || count[cur]&gt;0){      if(cur&lt;=Limit) count[cur]--;      for(auto temp:history)count[temp]=temp-1;      currentSqCnt-=history.size();      break;    }    history.push_back(cur);    cur=cur*cur;  }}void updateWhenInsert(ll num, ll &amp;currentSqCnt,vector&lt;ll&gt; &amp;count){  if(num==1) return;  ll cur=num;  vector&lt;ll&gt; history;  while(1){    if(cur&gt;Limit || count[cur]+1&lt;cur){      if(cur&lt;=Limit) count[cur]++;      for(auto temp:history) count[temp]=0;      currentSqCnt+=history.size();      break;    }    history.push_back(cur);    cur=cur*cur;  }}void solution(){  int n;  scanf(\"%lld\",&amp;n);  vector&lt;ll&gt; a(n+1);  for(ll i=1;i&lt;=n;i++){    scanf(\"%lld\",&amp;a[i]);  }  ll Q;  scanf(\"%lld\",&amp;Q);  vector&lt;Query&gt; queries(Q);  for(ll i=0;i&lt;Q;i++){    scanf(\"%lld%lld\",&amp;queries[i].s,&amp;queries[i].e);    queries[i].index=i;  }  for(k=1;k*k&lt;n;k++); //find bucket size  sort(queries.begin(),queries.end(),compareByBucket); // sort  vector&lt;ll&gt; count(Limit+10);  for(ll i=queries[0].s;i&lt;=queries[0].e;i++){    if(a[i]&lt;=Limit) count[a[i]]++;  }  ll currentSqCnt=0,s,e;  for(ll i=2;i&lt;=Limit;i++){    ll upCnt=count[i]/i;    count[i]%=i;    currentSqCnt+=upCnt;    if(i*i&lt;=Limit)      count[i*i]+=upCnt;  }  s=queries[0].s,e=queries[0].e;  queries[0].ans=currentSqCnt;  for(int i=1;i&lt;queries.size();i++){    auto query=queries[i];    while(s&lt;query.s) updateWhenErase(a[s],currentSqCnt,count),s++;    while(s&gt;query.s) updateWhenInsert(a[s-1],currentSqCnt,count),s--;    while(e&gt;query.e) updateWhenErase(a[e],currentSqCnt,count),e--;    while(e&lt;query.e) updateWhenInsert(a[e+1],currentSqCnt,count),e++;    queries[i].ans=currentSqCnt;  }  sort(queries.begin(),queries.end(),compareByIndex);  for(auto query:queries) printf(\"%lld\\n\",query.ans);}int main(){  ll T;  scanf(\"%lld\",&amp;T);  for(ll i=1;i&lt;=T;i++){    printf(\"Case #%lld\\n\",i);    solution();  }  return 0;}          "
  },
  
  {
    "title": "Z Algorithm",
    "url": "/posts/algorithm-z/",
    "categories": "Problem Solving, Algorithm",
    "tags": "z, z algorithm, string, suffix, suffix array, ps, problem solving",
    "date": "2024-07-04 23:01:29 +0800",
    





    
    "snippet": "      The Z-algorithm is an efficient algorithm (\\(O(N)\\)) that calculates the length of the longest substring starting from the each position for a given string.    1. Description  The Z-array for...",
    "content": "      The Z-algorithm is an efficient algorithm (\\(O(N)\\)) that calculates the length of the longest substring starting from the each position for a given string.    1. Description  The Z-array for a string \\(s\\) is an array where \\(z[i]\\) represents the length of the longest substring starting from the position \\(i\\) which is also a prefix of \\(s\\).The reason the time complexity is \\(O(n)\\) is due to reusing the results obtained previously.    2. Example Scenario  Consider the string s = “\\(ababcabab\\)”.  The Z-array for this string would be calculated as follows:  Initialization:  Start with \\(z[0]\\) = 0 because the entire string \\(s\\) is trivially a prefix of itself.For other positions, compute the longest match with the prefix starting from that position.  Calculating Z-values:                    i        The substring starting at index i        z[i]                            0        \\(ababcabab\\)        0                    1        \\(babcabab\\)        0                    2        \\(abcabab\\)        2                    3        \\(bcabab\\)        0                    4        \\(cabab\\)        0                    5        \\(abab\\)        4                    6        \\(bab\\)        0                    7        \\(ab\\)        2                    8        \\(b\\)        0                3. Code  class Solution {public:    long long sumScores(string s) {        long long ans=0;        int n=s.size(),l,r;        vector&lt;int&gt; z(n);        l=r=0;         z[0]=n;        ans+=z[0];        for(int i=1;i&lt;n;i++){            if(i&lt;=r) z[i]=min(r-i+1,z[i-l]);            while(i+z[i]&lt;n &amp;&amp; s[z[i]]==s[i+z[i]]) z[i]++;            if(i+z[i]-1&gt;r) l=i, r=i+z[i]-1;            ans+=z[i];        }        return ans;    }};    4. Proof  We will save the maximum of \\(i+z[i]-1\\) to \\(r\\), and save \\(i\\) to \\(l\\) when \\(r\\) is updated.            Case 1: \\(i \\leq r\\)      The statement \\(s[i...r] = s[(i-l)...(r-l)]\\) is valid                        Case 1-1: \\(i\\leq r\\) and \\(r-i+1 \\leq z[i-l]\\)          \\(r+1\\) is an unexplored index, so we should start exploring from \\(r+1\\) and update \\(z[i]\\)                          Case 1-2: \\(i\\leq r\\) and \\(r-i+1&gt; z[i-l]\\)          \\(z[i]=z[i-l]\\) is valid                            Case 2: \\(i&gt;r\\)      \\(r+1\\) is an unexplored index, so we should start exploring from \\(r+1\\) and update \\(z[i]\\)        In Case 1-2, we don’t enter the while loop because of the condition. In Cases 1-1 and 2, \\(i+z[i]\\) will always be greater than the previous \\(r\\). Thus, \\(i+z[i]\\) will cover every index form \\(0\\) to \\(n-1\\) exactly once. Therefore, the overall time complexity is \\(O(N)\\).      You can test your code here  "
  },
  
  {
    "title": "SCC (Strongly Connected Component) Algorithm",
    "url": "/posts/algorithm-scc/",
    "categories": "Problem Solving, Algorithm",
    "tags": "scc, tarjan's algorithm, kosaraju's algorithm, scc algorithm, algorithm, ps, problem solving",
    "date": "2024-07-03 23:13:00 +0800",
    





    
    "snippet": "      The SCC algorithm can be performed in O(N+M) time complexity, and there are two main methods to achieve this: Tarjan’s algorithm and Kosaraju’s algorithm.        Referenced from 『Programming ...",
    "content": "      The SCC algorithm can be performed in O(N+M) time complexity, and there are two main methods to achieve this: Tarjan’s algorithm and Kosaraju’s algorithm.        Referenced from 『Programming Contest Challenge Book』        1. Description  In a directed graph, a subset of vertices S is called a Strongly Connected Component (SCC) if every pair of vertices u and v in S has a path from u to v and from v to u. Essentially, all vertices within an SCC are mutually reachable.  An SCC is maximal in the sense that no additional vertices can be added to it without breaking the property of strong connectivity. This means that there is no other subset of vertices in the graph that could be combined with the SCC to form a larger SCC.  Every directed graph can be decomposed into a union of SCCs, where each SCC is disjoint from the others. After this decomposition, the remaining graph becomes a Directed Acyclic Graph (DAG), where SCCs are represented as individual nodes.  The algorithm used to identify and construct SCCs in a directed graph is often referred to as the SCC algorithm. One efficient algorithm for this task operates in O(N+M) time complexity, where N is the number of vertices in the graph and M is the number of edges in the graph.        In the graph above, vertices a, b, and e form an SCC. Vertices f and g form another SCC, and vertices c, d, and h form yet another SCC.      2. Tarjan’s Algorithm  Let’s suppose n is the number of vertices (The indices of the graph start from 1) and for a given vertex number v, the contents of the vector G[v] represent the vertex numbers that can be reached from v.  #include &lt;bits/stdc++.h&gt;using namespace std;int dfs(int v, int n, int &amp;cnt, vector&lt;vector&lt;int&gt;&gt; &amp;G, vector&lt;int&gt; &amp;d, vector&lt;bool&gt; &amp;finished, stack&lt;int&gt; &amp;S, vector&lt;vector&lt;int&gt;&gt; &amp;ans){  int p; // Stores the minimum value of d among the reachable child vertices (including itself) that are not in SCC.  p = d[v] = ++cnt;  S.push(v);  for (auto to : G[v]) {    if (d[to] == 0) p = min(p, dfs(to, n, cnt, G, d, finished, S, ans)); // Explore vertices that have not been visited yet.    else if (!finished[to]) p = min(p, d[to]); // The vertex has already been explored through another path, and we already know its d value.  }  if (p == d[v]) { // If the minimum value of d among the reachable child vertices (including itself) is equal to my d, then I am the start of an SCC.    vector&lt;int&gt; scc;    while(true){      int t=S.top(); S.pop();      finished[t]=true;      scc.push_back(t);      if(t==v) break;    }    ans.push_back(scc);  }  return p;}vector&lt;vector&lt;int&gt;&gt; tarjan(int n, vector&lt;vector&lt;int&gt;&gt; &amp;G){  vector&lt;bool&gt; finished(n+1); // Records whether the vertex has been included in an SCC  vector&lt;int&gt; d(n+1); // Stores the order of visits  vector&lt;vector&lt;int&gt;&gt; ans; // SCC output  stack&lt;int&gt; S; // Stores vertices in the order they were visited  int cnt=0; // A variable for ordering  for(int i=1;i&lt;=n;i++)    if(d[i]==0) dfs(i, n, G, finished, d, cnt, S, ans);  return ans;}      3. Kosaraju’s Algorithm  Let’s suppose the same input situation as Tarjan’s algorithm.  #include &lt;bits/stdc++.h&gt;using namespace std;void createReversedEdge(int n, vector&lt;vector&lt;int&gt;&gt; &amp;rG, vector&lt;vector&lt;int&gt;&gt; &amp;G){  for(int i=1;i&lt;=n;i++)    for(auto to:G[i])      rG[to].push_back(i);}void dfs(int v, vector&lt;vector&lt;int&gt;&gt; &amp;G, vector&lt;bool&gt; &amp;visited, vector&lt;int&gt; &amp;vs){  visited[v]=true;  for(auto to:G[v])    if(!visited[to]) dfs(to, G, visited, vs);  vs.push_back(v);}void rdfs(int v, vector&lt;vector&lt;int&gt;&gt; &amp;rG, vector&lt;bool&gt; &amp;visited, vector&lt;int&gt; &amp;scc){  visited[v]=true;  scc.push_back(v);  for(auto to:rG[v])    if(!visited[to]) rdfs(to, rG, visited, scc);}vector&lt;vector&lt;int&gt;&gt; kosaraju(int n, vector&lt;vector&lt;int&gt;&gt; &amp;G){  vector&lt;bool&gt; visited(n+1); // Records whether the vertex has been included in an SCC  vector&lt;int&gt; vs; // A variable to record post-order travelsal  vector&lt;vector&lt;int&gt;&gt; ans; // SCC output  vector&lt;vector&lt;int&gt;&gt; rG(n+1); // Graph with reversed edge directions  createReversedEdge(n,rG,G);  for(int i=1;i&lt;=n;i++)    if(!visited[i]) dfs(i,G,visited,vs);    fill(visited.begin(),visited.end(),false);  for(int i=vs.size()-1;i&gt;=0;i--){    vector&lt;int&gt; scc;    if(!visited[vs[i]]){      rdfs(vs[i],rG,visited,scc);      ans.push_back(scc);    }  }  return ans;}      4. Difference between Tarjan’s and Kosaraju’s  Tarjan’s uses one DFS and Kosaraju’s uses two DFS, but Tarjan’s is more difficult to understand than Kosaraju’s. You can use either one according to your preference."
  },
  
  {
    "title": "KMP(Knuth-Morris-Pratt) Algorithm",
    "url": "/posts/algorithm-kmp/",
    "categories": "Problem Solving, Algorithm",
    "tags": "kmp algorithm, string search, ps, problem solving, algorithm techiques, knuth, morris, pratt, algorithm",
    "date": "2024-06-30 23:13:00 +0800",
    





    
    "snippet": "  The KMP (Knuth-Morris-Pratt) algorithm is a fast string search algorithm.  Referenced from 『프로그래밍 대회에서 배우는 알고리즘 문제 해결 전략 세트2』 p.657    1. Overview  Let’s suppose there are two strings, A and B.Th...",
    "content": "  The KMP (Knuth-Morris-Pratt) algorithm is a fast string search algorithm.  Referenced from 『프로그래밍 대회에서 배우는 알고리즘 문제 해결 전략 세트2』 p.657    1. Overview  Let’s suppose there are two strings, A and B.The length of A is N and the length of B is M.We can find out where B is included in A using the KMP algorithm.The time complexity of this algorithm is \\(O(N + M)\\).  For example, if A is “abacabacabad” and B is “abacabad”, we can determine where B is included within A ( i=5 ) in \\(O(\\text{length of A + length of B})\\) time complexity.    2. The Definition of the pi Array  Let’s define a substring of string B from index i to j as B[i…j].  pi[i] represents the maximum length of the string that can simultaneously serve as both a prefix and a suffix of the substring B[0…i].  The picture below will help you understand this definition.    Let’s temporarily set aside how to compute pi and assume that we have already constructed the pi array.    3. The Main Process of KMP  Let’s suppose there are two strings A( = “abacabacabad”) and B( = “abacabad”).  In \\(O(N^2)\\) time complexity, you may write this code to find out where B is included in A.  vector&lt;int&gt; sample(string A, string B){  int N=A.size();  int M=B.size();  for(int i=0;i&lt;=N-M;i++){    bool possible=true;    for(int j=0;j&lt;M;j++)      if(A[i+j]!=B[j]) possible=false;    if(possible) printf(\"B is include within index: %d\\n\",i);  }}    However, we don’t need to iterate from i=0 to i=N. What does this mean? Please refer to the explanation below.    Assuming we already have the pi array, when A[q] and B[q] do not match at i=0, the next step isn’t i=i+1 but rather i=p (where p = q - pi[q-1]). This transition is perfectly valid and crucial to understand. ( Here, pi[q-1] represents the maximum length of the string that can simultaneously serve as both a prefix and a suffix of “abacaba”. )  Furthermore, since A[p…(q-1)] = B[0…(p-q-1)], we can start comparing from A[q] and B[p-q].  Code: O(N)  void kmp(string &amp;A, string &amp;B){  int N=A.size();  int M=B.size();  vector&lt;int&gt; whereBIsIncluded;  vector&lt;int&gt; pi = getPartialMatch(B); //Let's postpone the discussion on how this function is implemented for now.    int begin=0, matched=0;  while(begin&lt;=N-M){    if(matched &lt; M &amp;&amp; A[begin+matched]==B[matched]){      ++matched;      if(matched==M) whereBIsIncluded.push_back(begin);    } else{      if(matched==0) ++begin;      else {        begin += matched - pi[matched-1];        matched = pi[matched-1];      }    }  }}      4. How to construct the pi array?  When constructing the pi array, we can utilize the same principle used in the previous explanation. We compute the pi[] array by leveraging the concept of self-matching appearances while searching for itself.  Code: O(M)  vector&lt;int&gt; getPartialMatch(const string &amp;B) {    int M = B.size();    vector&lt;int&gt; pi(M, 0);    int begin = 1, matched = 0;    while (begin + matched &lt; M) {        if (B[begin + matched] == B[matched]) {            ++matched;            pi[begin + matched - 1] = matched;        } else {            if (matched == 0) ++begin;            else {                begin += matched - pi[matched - 1];                matched = pi[matched - 1];            }        }    }    return pi;}      5. Another Code: O(N+M)  This is an alternative implementation of KMP. The basic principle remains the same. It operates in O(N+M) time complexity.  vector&lt;int&gt; getPartialMatch(string &amp;B){  int M=(int)B.size(), matched=0;  vector&lt;int&gt; pi(M, 0);  for(int i=1;i&lt;M;i++){    while(matched&gt;0 &amp;&amp; B[matched]!=B[i]) matched=pi[matched-1];    if(B[matched]==B[i]) pi[i]=++matched;  }  return pi;}void kmp(string &amp;A, string &amp;B){  int matched=0;  int N = (int)A.size(), M = (int)B.size();  vector&lt;int&gt; pi=getPartialMatch(B);  vector&lt;int&gt; whereBIsIncluded;    for(int i=0;i&lt;N;i++){    while(matched&gt;0 &amp;&amp; A[i]!=B[matched])      matched=pi[matched-1];    if(A[i]==B[matched]){      ++matched;      if(matched==M){        whereBIsIncluded.push_back(i-matched+1);        matched=pi[matched-1];      }    }  }}    Next Post      If you understand what is kmp and how to construct it. I recommend read Z-algorithm  "
  },
  
  {
    "title": "Laws of UX: Using Psychology to Design Better Products & Services",
    "url": "/posts/laws-of-ux/",
    "categories": "Design, UI/UX",
    "tags": "ux, ui, design principles, jakob's law, fitts's law, miller's law, hick's law, postel's law, peak-end rule, aesthetic-usability effect, von restorff effect, tesler's law, doherty threshold, user experience, user interface, product design, usability, human-computer interaction, design psychology",
    "date": "2024-06-24 23:13:00 +0800",
    





    
    "snippet": "      UX/UI (user experience/user interface) is an important factor for a product. Someone may decide to buy or discard a product because of its design. This book describes the fundamental rules of...",
    "content": "      UX/UI (user experience/user interface) is an important factor for a product. Someone may decide to buy or discard a product because of its design. This book describes the fundamental rules of design that designers generally know from experience. The book allows readers to learn about what constitutes efficient design and the business value of design.        Referenced from Home: Laws of UX        1. Jakob’s Law  Designs should include familiar elements and functions. People prefer familiar designs and forms. If a design feels unfamiliar, they are less likely to use the product.      Mercedes-Benz Power Seat Controls imitate the shape of the seat, helping users understand how to control it.      2. Fitts’s Law  The difficulty of clicking something is proportional to the distance and inversely proportional to the width. In other words, touch interfaces should be close enough and large enough.      Modern cars have integrated air conditioning systems and traditional physical buttons into monitors, making it difficult to click. Within the monitor, it is not easy to adhere to Fitts’s Law.      3. Miller’s Law  The average person can only keep 7 (plus or minus 2) items in their working memory. Therefore, you should divide space into 7 chunks.      Nike’s website classifies components into 7 chunks.      4. Hick’s Law  The time it takes to make a decision increases with the number and complexity of choices. Minimize and optimize the number of options. Too many options can overwhelm the user.      Apple’s Smart TV remote has a very simple and refined design.      5. Postel’s Law  Design for the broadest possible acceptance of variable user input.      An example of a bad interface is one that only shows an error message after the user has finished entering their password and clicked a button to submit it, indicating that the password doesn’t meet the requirements. Instead, it could provide real-time feedback below the text input field about the password’s validity.      6. Peak-End Rule  People judge an experience largely based on how they felt at its peak and at its end, rather than the total sum or average of every moment of the experience.      The slot machine game app (Club Vegas) focuses on the moments when the user wins through exciting music and impressive visual effects.      7. Aesthetic-Usability Effect  Users often perceive aesthetically pleasing design as design that’s more usable.      Apple’s elegant and beautiful design has helped secure a competitive edge in the market.      8. Von Restorff Effect  Make important information or functions visually prominent. When emphasizing visual elements, limit the number to ensure that key items are not mistaken for advertisements. When highlighting specific elements, do not rely solely on color as this can exclude users with color blindness or low vision. Instead, use animations or size changes to draw attention.    9. Tesler’s Law  Every system retains a certain level of irreducible complexity, which must be preserved. Any complexity that designers and developers do not handle is passed on to the user, resulting in a poor user experience.    10. Doherty Threshold  Within 0.4 seconds! If a computer and a human interact within 0.4 seconds or less, productivity increases dramatically.      YouTube fills the loading blank page with animations and gray boxes until the content is downloaded. This helps users tolerate the waiting time more patiently without leaving the page, even if the loading time is over 0.4 seconds.  "
  },
  
  {
    "title": "Thoughts on Starting a GitHub Blog",
    "url": "/posts/thoughts-on-starting-a-github-blog/",
    "categories": "Development, Jekyll",
    "tags": "github, github blog, blog, creating a github blog, tech blog, engineering blog, ruby, jekyll, open source",
    "date": "2024-06-15 23:17:00 +0800",
    





    
    "snippet": "      What do developers need to stay competitive?    They must constantly challenge themselves in new fields.    Writing blog content allows them to distinguish what they know from what they don’t...",
    "content": "      What do developers need to stay competitive?    They must constantly challenge themselves in new fields.    Writing blog content allows them to distinguish what they know from what they don’t know.    Through personal branding, they can increase their credibility and uniqueness in their field.    1. Why Start a GitHub Blog?  The world is vast, and there are many developers. If you want to be a unique presence among the many developers, you need to work harder and challenge yourself in various fields. There are so many areas to study, and new fields and skills are constantly emerging, so a tendency to shy away from challenges is not suitable for a developer.  That’s why I started a GitHub blog. I wanted to learn about creating a Git blog using GitHub Pages and Jekyll, which is a field I’m not familiar with. I needed a place to organize what I studied, so I decided to create one.  Even if I have studied something before, I often don’t remember it after a few months. Sometimes, even if I search the internet for materials I had studied before, I can’t find them again. I intend to use this blog as a space where I can revisit what I have learned.  I believed that I needed a technical blog to increase my own value. To prove what I know and to showcase the projects I’ve worked on, a GitHub blog is a perfect space. Additionally, GitHub is efficient for linking my GitHub, LinkedIn, and projects, and it helps me showcase my resume. This comprehensive integration enhances my professional presence and makes it easier for potential employers or collaborators to see my work and skills.    2. Difficulties in Creating a GitHub Blog  I didn’t start by following the Jekyll tutorial; instead, I used open-source blog codes and themes available on GitHub to create one directly. Using the existing GitHub blog themes, you can create a sufficiently attractive blog, and if you have frontend knowledge, you can customize the blog to your liking. However, the challenging part was dealing with unexpected errors when running the blog’s local server or deploying it with GitHub Actions. If you don’t have experience solving such errors as a developer, I think the entry barrier is higher compared to other blog creation tools. I also resolved the Git blog errors by referring to other people’s blogs.    3. Blog Content  I believe that for this blog to be vital and valuable, it needs to be updated consistently. Ideally, I would post once a week, but I don’t want to force out content or write low-quality posts. Nonetheless, I plan to post at least once every two weeks. I intend to organize my wide-ranging interests, from development and design book contents to web development, game development, and algorithms (coding tests), on this blog.  Additionally, if you truly want to differentiate yourself from others, writing content in English could be beneficial. If not only Korean developers but also people from around the world read my blog, it would further increase my value."
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    
    "snippet": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnec...",
    "content": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnecessary files, and is perfect for users who want to focus on writing with minimal configuration.  Sign in to GitHub and navigate to the starter.  Click the Use this template button and then select Create a new repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Option 2. Forking the ThemeThis approach is convenient for modifying features or UI design, but presents challenges during upgrades. So don’t try this unless you are familiar with Jekyll and plan to heavily modify this theme.  Sign in to GitHub.  Fork the theme repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Setting up the EnvironmentOnce your repository is created, it’s time to set up your development environment. There are two primary methods:Using Dev Containers (Recommended for Windows)Dev Containers offer an isolated environment using Docker, which prevents conflicts with your system and ensures all dependencies are managed within the container.Steps:  Install Docker:          On Windows/macOS, install Docker Desktop.      On Linux, install Docker Engine.        Install VS Code and the Dev Containers extension.  Clone your repository:          For Docker Desktop: Start VS Code and clone your repo in a container volume.      For Docker Engine: Clone your repo locally, then open it in a container via VS Code.        Wait for the Dev Containers setup to complete.Setting up Natively (Recommended for Unix-like OS)For Unix-like systems, you can set up the environment natively for optimal performance, though you can also use Dev Containers as an alternative.Steps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone your repository to your local machine.  If you forked the theme, install Node.js and run bash tools/init.sh in the root directory to initialize the repository.  Run command bundle in the root of your repository to install the dependencies.UsageStart the Jekyll ServerTo run the site locally, use the following command:$ bundle exec jekyll s  If you are using Dev Containers, you must run that command in the VS Code Terminal.After a few seconds, the local server will be available at http://127.0.0.1:4000.ConfigurationUpdate the variables in _config.yml as needed. Some typical options include:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can enable or disable specific contacts in the _data/contact.yml file.Customizing the StylesheetTo customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss file to the same path in your Jekyll site, and add your custom styles at the end of the file.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main SASS file _sass/main.scss to the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign your new values there.Customizing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined in _data/origin/cors.yml. You can replace some of them based on the network conditions in the region where your website is published.If you prefer to self-host the static assets, refer to the chirpy-static-assets repository.DeploymentBefore deploying, check the _config.yml file and ensure the url is configured correctly. If you prefer a project site and don’t use a custom domain, or if you want to visit your website with a base URL on a web server other than GitHub Pages, remember to set the baseurl to your project name, starting with a slash, e.g., /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy Using Github ActionsPrepare the following:  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, update the platform list of the lock file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service:      Go to your repository on GitHub. Select the Settings tab, then click Pages in the left navigation bar. In the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  You can now visit the URL provided by GitHub to access your site.Manual Build and DeploymentFor self-hosted servers, you will need to build the site on your local machine and then upload the site files to the server.Navigate to the root of the source project, and build your site with the following command:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in the _site folder of the project’s root directory. Upload these files to your target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

